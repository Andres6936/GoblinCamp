# See build/README.

project "Goblin Camp"
    : default-build debug
    : source-location "Goblin Camp"
    : build-dir build/tmp
;

variant release-pdb
    : <optimization>speed <debug-symbols>on
      <inlining>full <runtime-debugging>off
;

exe "Goblin Camp"
    : [ glob src/*.cpp ]
      build/deps//gc-deps
    : <include>"Goblin Camp/include" <warnings>on
      <define>TIXML_USE_TICPP
      <conditional>@gc-feats
;

install install-binaries
    : "Goblin Camp"
    : <install-dependencies>on <install-type>EXE <install-type>SHARED_LIB
      <conditional>@install-feats
;

install install-data
    : [ glob *.dat ]
      [ glob *.xml ]
      [ glob *.png ]
      [ glob *.txt ]
      [ glob *.ini ]
    : <conditional>@install-feats
;

alias install : install-data install-binaries ;
explicit install install-data install-binaries ;

rule gc-feats ( properties * ) {
    local feats ;
    
    if <target-os>windows in $(properties) {
        feats += <define>WINDOWS ;
        feats += <user-interface>gui ;
    }
    
    if <toolset>msvc in $(properties) {
        feats += <define>_SCL_SECURE_NO_DEPRECATE ;
        feats += <define>_CRT_SECURE_NO_WARNINGS ;
        feats += <define>_CRT_SECURE_NO_DEPRECATE ;
        feats += <define>_CRT_NONSTDC_NO_DEPRECATE ;
        
        if <variant>debug in $(properties) {
            feats += <debug-store>database ;
            feats += <define>_HAS_ITERATOR_DEBUGGING=1 ;
            feats += <define>_SECURE_SCL=1 ;
        }
    }
    
    if <variant>debug in $(properties) {
        feats += <define>DEBUG ;
    }
    
    return $(feats) ;
}

rule install-feats ( properties * ) {
    local feats ;
    
    if <variant>release-pdb in $(properties) {
        feats += <location>build/dist/release ;
    } else {
        feats += <location>build/dist/debug ;
    }
    
    return $(feats) ;
}
