###############################################################################
##### Goblin Camp build system.
## See docs/build-readme.html for usage help.
###############################################################################
# vim: set expandtab :

import modules ;
import version ;
import build-system ;

###############################################################################
##### Global constants
## GC_VERSION is the current Goblin Camp version. GC_ROOT is an absolute path
## to Jamroot's directory.
###############################################################################

path-constant GC_ROOT    : .   ;
constant      GC_VERSION : 0.2 ;

###############################################################################
##### Setup
## Imports our tools and displays the banner.
###############################################################################

modules.poke : GC_VERSION : $(GC_VERSION) ;
modules.poke : GC_ROOT    : $(GC_ROOT)    ;

V = $(GC_VERSION) ;

ECHO "*******************************************" ;
ECHO "****    Goblin Camp build system v3    ****" ;
ECHO "*******************************************" ;
ECHO "****     Building Goblin Camp $(V)      ****" ;
ECHO "*******************************************" ;
ECHO "** Running bjam:" [ version.jam ] ;
ECHO "** Using Boost.Build:" [ version.boost-build ] ;

for local P in [ glob $(GC_ROOT)/build/boost-build/goblin-camp/tools/*.jam ] {
    import $(P:B) ;
    $(P:B).use-project ;
}

for local C in [ glob $(GC_ROOT)/build/boost-build/goblin-camp/*.jam ] {
   import $(C:B) ;
}

rule post-build ( ok ? ) {
    if $(ok) {
        ECHO ;
        ECHO "*******************************************" ;
        ECHO "****         Build successful!         ****" ;
        ECHO "*******************************************" ;
        ECHO "You will find the binaries in the build/bin-<variant>-<cpu> directory." ;
        ECHO ;
    }
}
IMPORT $(__name__) : post-build : : $(__name__).post-build ;
build-system.set-post-build-hook $(__name__).post-build ;

###############################################################################
##### Main project definition
## A top-level project â€” all other projects will inherit its requirements.
## If you need to set a symbol or property that needs to be propagated across
## all projects, this is the right place.
###############################################################################

project
    : requirements
      <toolset>msvc,<variant>release:<debug-symbols>on
      <variant>debug:<debug-symbols>on
      <threading>multi
      <define>GC_BOOST_BUILD
      #####
      ## Architecture defines
      #####
      <address-model>32:<define>X86
      <address-model>64:<define>X64
      #####
      ## NT specific defines
      #####
      <os>NT:<define>WINDOWS
      <os>NT:<define>WIN32_LEAN_AND_MEAN
      <os>NT:<define>NOMINMAX
      <os>NT:<define>_WIN32_WINNT=0x0502 ## We're targetting >=XP SP2
      <os>NT:<define>WINVER=0x0502
      <os>NT,<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
      <os>NT,<toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS
      <os>NT,<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
      <os>NT,<toolset>msvc:<define>_CRT_NONSTDC_NO_DEPRECATE
      <os>NT,<toolset>msvc:<define>STRICT
      <os>NT,<toolset>msvc,<variant>debug:<define>_HAS_ITERATOR_DEBUGGING=1
      <os>NT,<toolset>msvc,<variant>debug:<define>_SECURE_SCL=1
      <os>NT,<toolset>msvc,<variant>release:<define>_HAS_ITERATOR_DEBUGGING=0
      <os>NT,<toolset>msvc,<variant>release:<define>_SECURE_SCL=0
      <os>NT,<toolset>msvc:"<linkflags>/NODEFAULTLIB:LIBCMT /NODEFAULTLIB:LIBCMTD"
      <os>NT,<toolset>msvc:"<cflags>/bigobj"
      #####
      ## Linux specific defines
      #####
      <os>LINUX:<define>LINUX
      #####
      ## OSX specific defines
      #####
      <os>MACOSX:<define>MACOSX
    : build-dir $(GC_ROOT)/build/tmp
    : default-build debug
;

###############################################################################
##### Projects
## This sets up child projects.
###############################################################################

for local P in boost python-modules libtcod {
    use-project $(P) : $(GC_ROOT)/vendor/$(P) ;
}

###############################################################################
##### Dependency checks
## Checks whether dependencies are present and compilable.
###############################################################################

#
## Check Python version.
# This is not ideal, because it assumes the interpter is the same as the library.
# But I can't get it to work otherwise, so... better than nothing, right?
PYTHON = [ modules.peek : PYTHON ] ;
pyVer  = [ SHELL "$(PYTHON) -c \"import sys; print(str(sys.version_info[0]) + ' ' + str(sys.version_info[1]) + ' ' + str(sys.version_info[2]))\"" ] ;
pyVer  = [ MATCH "([0-9]+) ([0-9]+) ([0-9]+)" : $(pyVer) ] ;

if $(pyVer[1]) != 2 {
    ECHO !! Build system requires Python 2 at the moment, Python 3 is not supported. ;
    EXIT ;
}

if $(pyVer[2]) < 6 || ( $(pyVer[2]) = 6 && $(pyVer[3]) < 6 ) {
    ECHO !! Build system requires at least Python 2.6.6 to run properly. ;
    EXIT ;
}

###############################################################################
##### Build request
## Triggers the main build.
###############################################################################

build-project "Goblin Camp" ;
