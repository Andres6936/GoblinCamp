# Python tool. Replacement for boost-build/tools/python.jam.
#
# To configure:
#   using python
#       : <include>path-to-includes <library>path-to-libraries <version>2.7 <pydebug>on/off <suffix>_d <interpreter>python
#   ;
#

import path ;
import os ;
import property-set ;
import project ;
import modules ;

rule init ( options * ) {
    modules.poke $(__name__) : .options : [ property-set.create $(options) ] ;
}

local rule create-project ( requirements * : usage-requirements * ) {
    # Common options
    if $(.options) {
        local inc = [ $(.options).get <include> ] ;
        local lib = [ $(.options).get <library> ] ;
        
        requirements       += <include>$(inc) <search>$(lib) ;
        usage-requirements += <include>$(inc) ;
    }
    
    project.push-current [ project.current ] ;
    project.initialize $(__name__) ;
    project $(__name__) : requirements $(requirements) : usage-requirements $(usage-requirements) ;
    
    define-targets ;
    
    project.pop-current ;
}

#################

# Validate the version string and extract the major/minor part we care about.
# <from original python.jam>
local rule split-version ( version ) {
    local major-minor = [ MATCH ^([0-9]+)\.([0-9]+)(.*)$ : $(version) : 1 2 3 ] ;
    if ! $(major-minor[2]) || $(major-minor[3]) {
        ECHO "Warning: <version> in \"using python\" expects a two part (major, minor) version number; got" $(version) instead ;
        
        # Add a zero to account for the missing digit if necessary.
        major-minor += 0 ;
    }
    
    return $(major-minor[1]) $(major-minor[2]) ;
}

rule use-project ( ) {
    local usage  = ;
    local interp = ;
    
    if $(.options) {
        .py-version = [ $(.options).get <version> ] ;
        interp      = [ $(.options).get <interpreter> ] ;
        
        if [ $(.options).get <pydebug> ] = "on" {
            .py-debug  = [ $(.options).get <suffix> ] ;
            .py-debug ?= _d ;
            usage      = <define>Py_DEBUG ;
        }
    }
    
    .py-version ?= 2.7 ;
    .py-debug   ?=     ;
    
    interp ?= python ;
    ECHO ** Using Python executable: $(interp) ;
    
    modules.poke : PYTHON : $(interp) ;
    
    create-project : $(usage) ;
}

local rule define-targets ( ) {
    local namever = [ split-version $(.py-version) ] ;
    if [ os.name ] = NT {
        namever = $(namever:J="") ;
    } else {
        namever = $(namever:J=".") ;
    }
    local name = python$(namever)$(.py-debug:E=) ;
    
    ECHO ** Using Python: $(name) ;
    lib python : : <name>$(name) ;
}
