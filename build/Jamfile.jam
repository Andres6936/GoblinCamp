# Goblin Camp main project file
#
# You shouldn't edit it - see README for information about
# search paths, etc.

import modules ;
import os ;
import path ;
import property-set ;
import common ;

for local P in boost winsdk libtcod zlib python {
    import $(P) ;
    $(P).use-project ;
}

import gc-version ;
import gc-sln ;

##
# Project definition
##
project goblin-camp
    : default-build debug
    : requirements
      <threading>multi
      <include>$(GC_HEADERS)
      <include>$(GC_PROJECT_ROOT)
      <define>GC_BOOST_BUILD
      <define>BOOST_LIB_DIAGNOSTIC
      <define>BOOST_FILESYSTEM_VERSION=3
      # Architecture defines
      <address-model>32:<define>X86
      <address-model>64:<define>X64
      # NT specific defines
      <os>NT:<define>WINDOWS
      <os>NT:<define>WIN32_LEAN_AND_MEAN
      <os>NT:<define>NOMINMAX
      <os>NT,<variant>release:<user-interface>gui
      <os>NT,<variant>profile:<user-interface>gui
      <os>NT,<toolset>msvc:<define>_SCL_SECURE_NO_DEPRECATE
      <os>NT,<toolset>msvc:<define>_CRT_SECURE_NO_WARNINGS
      <os>NT,<toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
      <os>NT,<toolset>msvc:<define>_CRT_NONSTDC_NO_DEPRECATE
      <os>NT,<toolset>msvc:<define>STRICT
      # Linux specific defines
      <os>LINUX:<define>LINUX
      # OSX specific defines
      <os>MACOSX:<define>MACOSX
    : source-location $(GC_PROJECT_ROOT)
    : build-dir $(GC_TMP_DIR)/goblin-camp
;

##
# Local rules
##
local rule explicit-alias ( name : sources * : requirements * : default-build * : usage-requirements * ) {
    alias $(name) : $(sources) : $(requirements) : $(default-build) : $(usage-requirements) ;
    explicit $(name) ;
}

local rule explicit-install ( name : sources * : requirements * ) {
    install $(name) : $(sources) : $(requirements) ;
    explicit $(name) ;
}

local rule explicit-make ( name : sources * : generating-rule : requirements * ) {
    make $(name) : $(sources) : $(generating-rule) : $(requirements) ;
    explicit $(name) ;
}

local rule get-platform-sources ( platform : generic-tree * : generic-files * ) {
    local tree  = $(GC_$(platform)_SOURCES) ;
    local files = [ path.glob-tree $(tree) : *.cc *.cpp *.cxx ] ;
    
    if $(generic-tree) {
        for local file in $(generic-files) {
            files += $(GC_$(generic-tree)_SOURCES)/$(file) ;
        }
    }
    
    return $(files) ;
}

rule make-nsis ( targets * : sources * : properties * ) {
    local arch = x86 ;
    
    if <address-model>64 in $(properties) {
        arch = x64 ;
    }
    
    ARCH on $(targets)   = $(arch) ;
    PYTHON on $(targets) = [ modules.peek : PYTHON ] ;
}

actions make-nsis {
    $(PYTHON) $(GC_INSTALLER_DIR)/mkinstaller.py $(GC_VERSION) $(ARCH)
}

rule cannot-make-nsis ( targets * : sources * : properties * ) {
    ECHO ;
    ECHO "!! NSIS installer is meant for end users, and therefore cannot be built from the debug variant." ;
    ECHO "!! Append variant=release to your command line." ;
    
    EXIT ;
}

##
# Collect sources and dependencies
##
data-files      = [ path.glob $(GC_PROJECT_ROOT) : *.png *.txt ] ;
current-sources = [ path.glob-tree $(GC_SOURCES) : *.cpp : win32 linux osx unix ] ;
win32-sources   = [ get-platform-sources WIN32 ] ;
linux-sources   = [ get-platform-sources LINUX : UNIX : main.cpp ] ;
macosx-sources  = [ get-platform-sources OSX : UNIX : main.cpp ] ;
python-sources  = [ path.glob $(GC_PY_SOURCES) : *.c ] ;

binaries-dist-dir   = ;
data-dist-dir       = ;
additional-dist-dir = ;
additional-files    = ;
additional-reqs     = ;

# Generated files
win32-ver-sources += $(GC_TEMPLATES_DIR)/_version.rc_in ;
version-sources   += $(GC_TEMPLATES_DIR)/_version.cpp_in ;

# Platform dependencies
explicit-alias win32-deps : /winsdk//dbghelp /winsdk//shell32 /winsdk//shlwapi ;
explicit-alias linux-deps ;
explicit-alias osx-deps : : : : <framework>CoreFoundation ;

# Boost dependencies
boost-libs = serialization thread system filesystem python ;

boost-deps = ;
for local name in $(boost-libs) {
    boost-deps += /boost//$(name) ;
}

# All common dependencies
explicit-alias common-deps
    : $(boost-deps) /libtcod//libtcod /python//python
;

if [ os.name ] = NT {
    ECHO ** Building for Windows ;
    
    if --iterator-debugging in [ modules.peek : ARGV ] {
        ECHO ** Building with iterator debugging. ;
        ECHO ** If you're getting multi_array errors with Boost and MSVC2010, you should not enable this. ;
        
        additional-reqs += <toolset>msvc,<variant>debug:<define>_HAS_ITERATOR_DEBUGGING=1 ;
        additional-reqs += <toolset>msvc,<variant>debug:<define>_SECURE_SCL=1 ;
    } else {
        additional-reqs += <toolset>msvc,<variant>debug:<define>_HAS_ITERATOR_DEBUGGING=0 ;
        additional-reqs += <toolset>msvc,<variant>debug:<define>_SECURE_SCL=0 ;
    }
    
    current-sources  += $(win32-sources) ;
    version-sources  += $(win32-ver-sources) ;
    additional-files += dbghelp.dll [ glob $(GC_PREBUILT_DIR)/* ] ;
    
    explicit-make dbghelp.dll : $(GC_REDIST_DIR)/dbghelp-x86.dll : @common.copy ;
    explicit-make dbghelp.dll : $(GC_REDIST_DIR)/dbghelp-x86.dll : @common.copy : <address-model>64 ;
    
    explicit-alias platform-deps : win32-deps ;
} else if [ os.name ] = LINUX {
    ECHO ** Building for Linux ;
    
    binaries-dist-dir  = bin ;
    data-dist-dir      = share/goblin-camp ;
    current-sources   += $(linux-sources) ;
    
    explicit-alias platform-deps : linux-deps ;
} else if [ os.name ] = MACOSX {
    ECHO ** Building for OSX ;
    
    binaries-dist-dir    = MacOS ;
    data-dist-dir        = Resources ;
    additional-dist-dir  = Goblin Camp.app ;
    current-sources     += $(osx-deps) ;
    
    obj Info.plist : $(GC_TEMPLATES)/Info.plist_in ;
    additional-files += Info.plist ;
    
    explicit-alias platform-deps : osx-deps ;
} else {
    ECHO !!! Error: Platform not configured: [ os.name ] ;
    ECHO !!! You either encountered a bug, or trying to build Goblin Camp on unsupported platform ;
    EXIT ;
}

# Platform-specific and common dependencies combined
explicit-alias gc-deps
    : platform-deps common-deps
    :
    :
    : $(additional-reqs)
;

##
# Define targets
##
#
# Version information
version-reqs = ;
if --with-revid in [ modules.peek : ARGV ] {
    version-reqs = <define>WITH_REVID ;
}

alias gc-version : $(version-sources) : : : $(version-reqs) ;
make mod.dat : $(GC_TEMPLATES_DIR)/mod.dat_in : @gc-version.generate ;
always gc-version mod.dat ;

#
# Precompiled header
cpp-pch stdafx.hpp
    : $(GC_HEADERS)/stdafx.hpp gc-deps
;

#
# Python support
lib pysupport
    : $(python-sources)
      /zlib//zlib
    : <link>static <implicit-dependency>/python//python
;

#
# goblin-camp executable
exe goblin-camp
    : $(current-sources)
      gc-deps
      gc-version
      stdafx.hpp
      pysupport
;

#
# NSIS installer
explicit-make setup.exe : $(GC_INSTALLER_DIR)/base.nsi : @cannot-make-nsis ;
explicit-make setup.exe : $(GC_INSTALLER_DIR)/base.nsi : @make-nsis : <variant>release ;

# <implicit-dependency> is here to forcibly build and dist goblin-camp *before* makensis is called.
explicit-alias nsis : dist setup.exe : <implicit-dependency>dist ;

#
# dist targets
local rule get-dist-dir ( properties * : what * ) {
    local dir     = $(GC_DIST_DIR)/ ;
    local propset = [ property-set.create $(properties) ] ;
    local variant = [ $(propset).get <variant> ] ;
    local arch    = x86 ;
    
    if <address-model>64 in $(properties) {
        arch = x64 ;
    }
    
    dir = $(dir)$(variant)-$(arch)/ ;
    
    if $(additional-dist-dir) {
        dir = $(dir)$(additional-dist-dir)/ ;
    }
    
    if $(what) = bin && $(binaries-dist-dir) {
        dir = $(dir)$(binaries-dist-dir)/ ;
    } else if $(what) = data && $(data-dist-dir) {
        dir = $(dir)$(data-dist-dir)/ ;
    }
    
    return <location>$(dir) ;
}

rule get-dist-additional ( properties * ) {
    return [ get-dist-dir $(properties) ] ;
}

rule get-dist-bin ( properties * ) {
    return [ get-dist-dir $(properties) : bin ] ;
}

rule get-dist-data ( properties * ) {
    return [ get-dist-dir $(properties) : data ] ;
}

rule get-dist-gccore ( properties * ) {
    dir = [ get-dist-dir $(properties) : data ] ;
    return $(dir)lib/gcamp_core ;
}

explicit-install dist-additional
    : $(additional-files)
    : <conditional>@get-dist-additional
;

explicit-install dist-binaries
    : goblin-camp
    : <install-dependencies>on <install-type>SHARED_LIB <toolset>msvc:<install-type>PDB <install-type>EXE
      <conditional>@get-dist-bin
;

explicit-install dist-data
    : $(data-files)
    : <conditional>@get-dist-data
;

explicit-install dist-lib
    : [ path.glob-tree $(GC_PROJECT_ROOT)/lib : *.py *.zip *.dat ]
    : <conditional>@get-dist-data
      <install-source-root>$(GC_PROJECT_ROOT)
;

explicit-install dist-mod-version
    : mod.dat
    : <conditional>@get-dist-gccore
;

explicit-alias dist : dist-data dist-binaries dist-additional dist-lib dist-mod-version ;

#
# Solution files
explicit-make goblin-camp-msvc9.sln      : $(GC_TEMPLATES_DIR)/goblin-camp-msvc9.sln_in      : @gc-sln.generate-sln ;
explicit-make goblin-camp-msvc9.vcproj   : $(GC_TEMPLATES_DIR)/goblin-camp-msvc9.vcproj_in   : @gc-sln.generate-2008 ;
explicit-make goblin-camp-msvc10.sln     : $(GC_TEMPLATES_DIR)/goblin-camp-msvc10.sln_in     : @gc-sln.generate-sln ;
explicit-make goblin-camp-msvc10.vcxproj : $(GC_TEMPLATES_DIR)/goblin-camp-msvc10.vcxproj_in : @gc-sln.generate-2010 ;

explicit-install sln2008
    : goblin-camp-msvc9.sln goblin-camp-msvc9.vcproj
    : <location>$(GC_MSVC_SLN_DIR)
;

explicit-install sln2010
    : goblin-camp-msvc10.sln goblin-camp-msvc10.vcxproj
    : <location>$(GC_MSVC_SLN_DIR)
;
